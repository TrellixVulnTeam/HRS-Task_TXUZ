{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap, throwError, map, of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let Departmentservice = /*#__PURE__*/(() => {\n  class Departmentservice {\n    /**\r\n     *\r\n     */\n    constructor(http) {\n      this.http = http;\n      this.BaseURl = 'https://localhost:5050/Department';\n    }\n\n    GetDepartments() {\n      return this.http.get(this.BaseURl).pipe(tap(data => console.log('All', JSON.stringify(data))), catchError(this.handleError));\n    }\n\n    GetDepartment(id) {\n      if (id === 0) {\n        return of(this.initializeDepartment());\n      }\n\n      const url = `${this.BaseURl}/${id}`;\n      return this.http.get(url).pipe(tap(data => console.log('getDepartment: ' + JSON.stringify(data))), catchError(this.handleError));\n    }\n\n    createDepartment(department) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      department.id = null;\n      return this.http.post(this.BaseURl, department, {\n        headers\n      }).pipe(tap(data => console.log('createDepartment: ' + JSON.stringify(data))), catchError(this.handleError));\n    }\n\n    deleteDepartment(id) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      const url = `${this.BaseURl}/${id}`;\n      return this.http.delete(url, {\n        headers\n      }).pipe(tap(data => console.log('deleteDepartment: ' + id)), catchError(this.handleError));\n    }\n\n    updateDepartment(Department) {\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      const url = `${this.BaseURl}/${Department.id}`;\n      return this.http.put(url, Department, {\n        headers\n      }).pipe(tap(() => console.log('updateDepartment: ' + Department.id)), // Return the Department on an update\n      map(() => Department), catchError(this.handleError));\n    }\n\n    handleError(err) {\n      // in a real world app, we may send the server to some remote logging infrastructure\n      // instead of just logging it to the console\n      let errorMessage = '';\n\n      if (err.error instanceof ErrorEvent) {\n        // A client-side or network error occurred. Handle it accordingly.\n        errorMessage = `An error occurred: ${err.error.message}`;\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong,\n        errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\n      }\n\n      console.error(errorMessage);\n      return throwError(() => errorMessage);\n    }\n\n    initializeDepartment() {\n      // Return an initialized object\n      return {\n        id: 0,\n        departmentName: ''\n      };\n    }\n\n  }\n\n  Departmentservice.ɵfac = function Departmentservice_Factory(t) {\n    return new (t || Departmentservice)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  Departmentservice.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Departmentservice,\n    factory: Departmentservice.ɵfac\n  });\n  return Departmentservice;\n})();","map":null,"metadata":{},"sourceType":"module"}